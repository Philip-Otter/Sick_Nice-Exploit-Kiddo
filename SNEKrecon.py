# Copyright 2023 2xdropout

import SNEKactions
import math
from os import system
from termcolor import colored


def convert_2_CIDR(netmask):
    octetOne = netmask.split('.')[0]
    octetTwo = netmask.split('.')[1]
    octetThree = netmask.split('.')[2]
    octetFour = netmask.split('.')[3]
    networkBits = 0

    netmaskList = [octetOne, octetTwo, octetThree, octetFour]

    for octet in netmaskList:
        bits = [*('{0:08b}'.format(int(octet)))]
        for value in bits:
            if value == '1':
                networkBits += 1
            elif value == '0':
                pass
            else:
                errorText = 'INVALID BIT ', value,' DURING CIDR TRANSLATION'
                print(colored(errorText, 'red'))
    
    CIDR = '/' + str(networkBits)

    return CIDR


def calculate_broad_net_addr(CIDR, ip, type):
    networkBits = int(CIDR[1:])
    octetOne = ip.split('.')[0]
    octetTwo = ip.split('.')[1]
    octetThree = ip.split('.')[2]
    octetFour = ip.split('.')[3]

    attackerList = [octetOne, octetTwo, octetThree, octetFour]
    broadcastList = []

    for octet in attackerList:
        if networkBits - 8 >= 0:
            bits = [*('{0:08b}'.format(int(octet)))]
            for values in bits:
                broadcastList.append(str(values))
            networkBits = networkBits - 8
        else:
            bits = [*('{0:08b}'.format(int(octet)))]
            for values in bits:
                if networkBits - 1 >= 0:
                    broadcastList.append(str(values))
                    networkBits = networkBits - 1
                else:
                    if type == 'network':
                        broadcastList.append(str(0))
                    elif type == 'broadcast':
                        broadcastList.append(str(1))
                    else:
                        print(colored('ERROR INVALID TYPE PASSED TO calculate_broad_net_addr()','red'))
                    networkBits = networkBits - 1
    
    octetFirst = octetSecond = octetThird = octetFourth = 'placeHolders'
    broadcastAddr = [octetFirst, octetSecond, octetThird, octetFourth]
    octetCounter = 1

    for octet in broadcastAddr:
        if octetCounter == 1:
            broadcastAddr[0] = str(int(''.join(broadcastList)[:8],2))
            octetCounter += 1
        elif octetCounter == 2:
            broadcastAddr[1] = str(int(''.join(broadcastList)[8:16],2))
            octetCounter += 1
        elif octetCounter == 3:
            broadcastAddr[2] = str(int(''.join(broadcastList)[16:24],2))
            octetCounter += 1
        elif octetCounter == 4:
            broadcastAddr[3] = str(int(''.join(broadcastList)[24:32],2))
            octetCounter += 1
        else:
            print(colored("OCTET COUNTER ERROR"))

    return '.'.join(broadcastAddr)


def net_scan():
    

    def netscan_check():
        checkList = ['attackerIP', 'netmask']
    
        for item in checkList:
            if SNEKactions.get_var(str(item)) is None:
                print(str(item),' is not set!')
                return False
    
        return True

    print('\n')
    if netscan_check():
        print(colored('Starting scan', 'blue'))
        print('\n')
        CIDR = convert_2_CIDR(SNEKactions.get_var('netmask'))
        netAddr = calculate_broad_net_addr(CIDR, str(SNEKactions.get_var('attackerIP')), 'network')
        system('mkdir ~/Desktop/SNEK')
        print(colored('...Working...','blue'))
        command = 'nmap -sV -T 5 -v ' + netAddr + CIDR + ' -oX ~/Desktop/SNEK/SNEK_Netscan_' + netAddr + '.xml'
        system(command)
        print(colored('...Working...','blue'))
        command = 'xsltproc ~/Desktop/SNEK/SNEK_Netscan_' + netAddr + '.xml -o ~/Desktop/SNEK/SNEK_Netscan_' + netAddr + '.html'
        system(command)
    else:
        print(colored('ABORTING!', 'red'))


def net_sim():
    ip = input('Please provide a valid IP within the simulate network:  ')
    netmask = input("Please provide the simulated network's netmask:  ")
    CIDR = convert_2_CIDR(netmask)
    network = calculate_broad_net_addr(CIDR, ip, 'network')
    broadcast = calculate_broad_net_addr(CIDR, ip, 'broadcast')
    netCIDR = str(network) + str(CIDR)
    print('\n')
    print(colored("The network's CIDR notation:", 'blue'))
    print(netCIDR)
    print(colored("The network's network address:", 'blue'))
    print(network)
    print(colored("The network's broadcast address:", 'blue'))
    print(broadcast)
    print(colored("The network's number of usable IP addresses:", 'blue'))
    print(((pow(2,(32 -int(CIDR[1:]))))-2))
    print('\n')


def target_scan():

    if SNEKactions.get_var('target') is None:
        print(colored('ERROR! No target set!','red'))
        return

    ip = SNEKactions.get_var('target')
    print(colored('Starting scan', 'blue'))
    print('\n')
    system('mkdir ~/Desktop/SNEK')
    command = 'nmap -sCV -p 1-65535 -T 5 -v ' + ip + ' -oX ~/Desktop/SNEK/SNEK_Targetscan_' + ip + '.xml'
    system(command)
    command = 'xsltproc ~/Desktop/SNEK/SNEK_Targetscan_' + ip + '.xml -o ~/Desktop/SNEK/SNEK_Targetscan_' + ip + '.html'
    system(command)
    print('\n')
    