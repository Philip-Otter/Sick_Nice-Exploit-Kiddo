#!/bin/sudo python3

# Copyright 2023 2xdropout

import SNEKshell, SNEKactions, SNEKart, SNEKlistener, SNEKrecon, SNEKhiss
import cmd, readline, logging
from os import system
from termcolor import colored

global lastBuildVersion
global centerBuild

lastBuildVersion = '0.1.2 Garter Snake'

# Setup
system('clear')
with open('/opt/SNEK/.vars.SNEK','w') as file:
    pass
file.close()
SNEKactions.write_vars('attackerPort',8008)
SNEKactions.write_vars('listener','hiss')
SNEKactions.write_vars('layer','main')
print('\n')
SNEKart.main()
SNEKart.title()
centerBuild = '                     ' + lastBuildVersion
print(colored(centerBuild, 'blue'))
print('\n')

class SNEKShell(cmd.Cmd):
    prompt = SNEKactions.get_banner(SNEKactions.get_var('layer'))


    # Navigation commands    
    def do_main(self, arg):
        'Change to the MAIN menu'
        SNEKactions.write_vars('layer','main')
        self.prompt = SNEKactions.get_banner(SNEKactions.get_var('layer'))


    def do_shells(self, arg):
        'Change to the SHELLS menu'
        SNEKactions.write_vars('layer','shells')
        self.prompt = SNEKactions.get_banner(SNEKactions.get_var('layer'))

    
    def do_reverse(self, arg):
        'Change from the SHELLS or MAIN menus to the REVERSE menu'
        if SNEKactions.get_var('layer') in ['main','shells','shells_bind']:
            SNEKactions.write_vars('layer','shells_reverse')
            self.prompt = SNEKactions.get_banner(SNEKactions.get_var('layer'))
        elif SNEKactions.get_var('layer') == 'shells_reverse':
            pass
        else:
            print('ERROR! Navigate to the REVERSE menu from the MAIN, SHELLS, or BIND menus')
    

    def do_bind(self, arg):
        'Change from the SHELLS or MAIN menus to the BIND menu'
        if SNEKactions.get_var('layer') in ['main','shells','shells_reverse']:
            SNEKactions.write_vars('layer','shells_bind')
            self.prompt = SNEKactions.get_banner(SNEKactions.get_var('layer'))
        else:
            print('ERROR! Navigate to the REVERSE menu from the MAIN, SHELLS, or REVERSE menus')
 

    # Escapes
    def do_quit(self, arg):
        'Quit SNEK'
        SNEKactions.clean_up()
        exit()
    

    def do_exit(self, arg):
        'Quit SNEK'
        SNEKactions.clean_up()
        exit()
    

    # Tools
    def do_shell(self, arg):
        'Run shell commands. Can also use "!" to trigger'
        system(arg)

    
    def do_listener(self, arg):
        'Launch the listener'
        print(colored('\n"ctrl+c" to escape!','white', 'on_red'))
        SNEKlistener.launch_listener()
    

    def do_netscan(self, arg):
        'Run a network scan'
        SNEKrecon.net_scan()
    
    
    def do_targetscan(self,arg):
        'Scan your target'
        SNEKrecon.target_scan()
    

    def do_netsim(self, arg):
        'Provide network, broadcast, and CIDR infromation based on a simulated network'
        SNEKrecon.net_sim()
    
    
    def do_hiss(self, arg):
        'Run the HISS ping shell'
        print(colored('\n"ctrl+c" to escape!','white', 'on_red'))
        print('\n')
        try:
            SNEKhiss.main()
        except:
            print(colored('ERROR OCCURED', 'red'))
            logging.exception('')
    

    # Variable interactions
    def do_set(self, arg):
        'Set variable values'
        SNEKactions.base_actions(arg)
    

    def do_vars(self, arg):
        'List stored variables'
        SNEKactions.base_actions('vars')


    def do_options(self, arg):
        'Set required menu specific options'
        if SNEKactions.get_var('layer') in ['shells_reverse','shells_bind']:
            SNEKshell.shells_actions()
        else:
            print('No options available for this menu')
    
   
    def do_os(self,arg):
        'Set the target operating system'
        SNEKactions.base_actions('os')
    

    # Activation commands
    def do_hack(self, arg):
        'HACK EVERYTHING'
        if SNEKactions.get_var('layer') in ['shells_reverse', 'shells_bind']:
            SNEKshell.bind_rev_actions()
        else:
            print('Hack is not available from this menu!')


    # Bonus commands
    def do_legacy(self,arg):
        'Run legacy SNEK commands. WARNING these may cause SNEK to crash'
        SNEKactions.base_actions(arg)
    

    def do_art(self,arg):
        'Display some ASCII art!'
        SNEKart.main()
    

    def do_version(self,arg):
        'Display the build version'
        print('\n')
        SNEKart.main()
        SNEKart.title()
        print(colored(centerBuild, 'blue'))
        print('\n')
    

    def do_clear(self,arg):
        'Clear the screen'
        system('clear')


if __name__ == '__main__':
    SNEKShell().cmdloop()