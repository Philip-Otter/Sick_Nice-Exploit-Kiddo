# Copyright 2023 2xdropout

import SNEKart, SNEKlistener
import pty
from os import system
from termcolor import colored


# Variable management
#============================================================================
def write_vars(var,val):
    content = str(var)+':'+str(val)+'\n'

    with open ('/opt/SNEK/.vars.SNEK', 'r') as file:
        fileContents = file.readlines()
        duplicate = False

        file.seek(0)
        lineCount = 0

        for line in file:
            if line.split(':')[0] == str(var):
                changeLine = int(lineCount)
                duplicate = True
            lineCount += 1

        if duplicate:
            fileContents[int(changeLine)] = content
    file.close()

    if not duplicate:
        with open ('/opt/SNEK/.vars.SNEK', 'a') as file:
            file.write(content)
        file.close()
    else:
        with open ('/opt/SNEK/.vars.SNEK', 'w') as file:
            file.writelines(fileContents)
        file.close()


def get_var(var):
    value = None
    foundVar = False

    with open('/opt/SNEK/.vars.SNEK','r') as file:
        for line in file:
            if line.split(':')[0] == str(var):
                value = line.split(":")[1].rstrip()
                foundVar = True
    file.close()

    if not foundVar:
        errorMessage = 'ERROR:  ' + str(var) + ' IS NOT SET'
        print(colored(errorMessage, 'red'))

    return value


def clean_up():
    system('rm /opt/SNEK/.vars.SNEK 2> /dev/null')


def print_vars():
    print('\n')
    with open ('/opt/SNEK/.vars.SNEK', 'r') as file:
        for line in file:
            print(line.rstrip())
    file.close()
    print('\n')
#============================================================================


def base_actions(command): #, layer):  Removed for new SNEK shell

    if command is None:
        print('Empty Value')
    elif command in ['art', 'ART']:
        SNEKart.main()
    elif command in ['snek', 'SNEK']:
        SNEKart.title()
    # Target variables
    elif command[:7] in ['target ', 'TARGET ']: # The spaces are important to avoiding conflict with other "target" vars
        target = command[7:] 
        write_vars('target',str(target))
        print(command[:6],'set as:  ', target)
    elif command in ['os', 'OS']:
        os = input("Windows or Linux:  ")
        if os in ['Windows', 'windows', 'w']:
            write_vars('os', 'windows')
        elif os in ['Linux', 'linux', 'l']:
            write_vars('os','linux')
    elif command[:10] in ['targetPort', 'targetport', 'TARGETPORT']:
        targetPort = command[11:]
        write_vars('targetPort',targetPort)
        print(command[:10],'set as',targetPort)
    # Attacker variables
    elif command[:8] in ['attacker', 'ATTACKER']:
        attackerIP = command[9:]
        write_vars('attackerIP',attackerIP)
        print(command[:8],'set as:  ',attackerIP)
    elif command[:10] in ['attackport', 'ATTACKPORT','attackPort']:
        attackerPort = command[11:]
        write_vars('attackPort',attackerPort)
        print(command[:10],'set as:  ',attackerPort)
    # Network variables
    elif command[:7] in ['netmask', 'NETMASK']:
        netmask = command[8:]
        write_vars('netmask',netmask)
        print(command[:7], 'set as:  ',netmask)
    # Variable commands
    elif command in ['vars','VARS']:
        print_vars()
    # Tools
    elif command[:8] in ['listener', 'LISTENER']:
        listener = command[9:]
        write_vars('listener',listener)
        print(command[:8], 'set as:  ',listener)
    elif command in ['shell','SHELL']:
        print('\nEntering bash shell!')
        print(colored('ctrl+d to escape!','white', 'on_red'))
        pty.spawn('/bin/bash')
    # Debugging
    elif command == 'test':
        write_vars('attackerIP','192.168.0.21')
        write_vars('os','linux')
        write_vars('payloadVector','nc')
        write_vars('shell', '/bin/bash')
        write_vars('target', '192.168.0.49')
        write_vars('targetPort', '6969')
        write_vars('netmask', '255.255.255.0')
        write_vars('listener', 'nc')
        print_vars()
    elif command in ['dump', 'DUMP']:
        certain = input("Warning you are about to clear all user set variables. Do you wish to proceed?\n")
        if certain in ['y', 'Y', 'Yes','yes','YES']:
            clean_up()
            system('touch .vars.SNEK')
            print("USER SET VARIABLES HAVE BEEN CAST INTO THE ETHER")
        else:
            print("ABORTING DATA DUMP")
    else:
        print('SNEK got confused about', '"',command,'"')


# Testing
def get_banner(layer):
    if layer == 'main':
        return '<<<<SNEK>>>> '
    elif layer == 'shells':
        return '<<SNEK>><<SHELLS>> '
    elif layer == 'shells_bind':
        return '<<SNEK><SHELLS><BIND>> '
    elif layer == 'shells_reverse':
        return '<<SNEK><SHELLS><REVERSE>> '